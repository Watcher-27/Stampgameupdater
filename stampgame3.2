import sys,os
from time import sleep

# change this to current version
# this version is technically the same but it is coded better than 3.2
version = 3.22

print("Welcome to StampGame"+str(version)+'\n')
print("Keep this window open")
print("Error Messages and other debugging info will appear here\n")
sleep(0.1)
os.system("python update.py")


try:
    import tkinter
    from tkinter import messagebox
    from tqdm import tqdm
    import json
    import pyautogui

    sleep(0.1)
    
    window = tkinter.Tk()
    window.title("Stamp Game")

    saveVals = []
    bg = tkinter.PhotoImage(file="png.png")
    back = tkinter.PhotoImage(file="bgg.png")
    ruler1 = tkinter.PhotoImage(file="rl4.png")
    ruler2 = tkinter.PhotoImage(file="rl3.png")
    ruler3 = tkinter.PhotoImage(file="rl2.png")
    ruler4 = tkinter.PhotoImage(file="rl1.png")

    lMultiplier = 52
    small = False
    sWidth = 12
    newWindow = 0
    Tile1000 = []
    Tile100 = []
    Tile10 = []
    Tile1 = []
    Text1 = []
    Text10 = []
    Text100 = []
    Text1000 = []
    TextSpace1 = []
    TextSpace10 = []
    TextSpace100 = []
    TextSpace1000= []
    checknum = []
    line1 = []
    line10 = []
    line100 = []
    line1000 = []
    testB = []
    locationArr = []


    def itemInit():
        window.iconbitmap('icon.ico')

        canvasI.place(x=0, y=0)
        buttonDiv.grid(row=3, column=0)
        button1.grid(row=3, column=6)
        button10.grid(row=3, column=5)
        button100.grid(row=3, column=4)
        button1000.grid(row=3, column=3)
        buttonClr.grid(row=0, column=1)
        button1Del.grid(row=2, column=6)
        button10Del.grid(row=2, column=5)
        button100Del.grid(row=2, column=4)
        button1000Del.grid(row=2, column=3)
        buttonExt.grid(row=2, column=0)
        buttonAdd.grid(row=3, column=1)
        buttonExtt.grid(row=0, column=0)
        buttonWi.grid(row=2, column=1)
        buttonSa.place(x=0, y=78)
        buttonLo.place(x=80, y=78)
        canvas1.grid(row=5, column=3)
        canvas2.grid(row=5, column=4)
        canvas3.grid(row=5, column=5)
        canvas4.grid(row=5, column=6)
        buttonSmall.place(x = 0,y = 104)
        tkinter.Misc.lift(canvas1)
        tkinter.Misc.lift(canvas2)
        tkinter.Misc.lift(canvas3)
        tkinter.Misc.lift(canvas4)


    up = open('update.txt','r')
    upp = up.readline()
    upp = float(upp)

    if(upp > version):
        print("A new version of StampGame has been released.")
        os.system("updatenote.py")
            
    sleep(0.1)
    up.close()


    def ATS(fr1000,fr100,fr10,fr1):
        global Tile1000
        global Tile100
        global Tile10
        global Tile1
        global Text10
        global Text10
        global Text100
        global Text1000
        global TextSpace1000
        global TextSpace100
        global TextSpace10
        global TextSpace1
        global lMultiplier
        global sWidth
        sleep(0.1)
        sWidth = 12
        if small :
            sWidth = 16
            lMultiplier = 32
        else:
            sWidth = 12
            lMultiplier = 52         
        addheight = lMultiplier - 2
        
        while(True):
            if(fr1000 <= 0 or fr1000 == None):
                break
            location = lMultiplier * len(Tile1000)
            
            Tile1000.append(canvas1.create_rectangle(32+sWidth, location+10, 116-sWidth, location+10+addheight, fill='green'))
            if small == False:
                location += 10
            Text1000.append(canvas1.create_text(77, location+24, fill="black", font="Arial", text="1000"))
            canvas1.update()
            fr1000 -= 1
            
        while(True):
            if(fr100 <= 0 or fr100 == None):
                break
            location = lMultiplier * len(Tile100)
            Tile100.append(canvas2.create_rectangle(32+sWidth, location+10, 116-sWidth, location+10+addheight, fill='red'))
            if small == False:
                location += 10
            Text100.append(canvas2.create_text(77, location+24, fill="black", font="Arial",text="100"))
            canvas2.update()
            fr100 -= 1
            
        while(True):
            if(fr10 <= 0 or fr10 == None):
                break
            location = lMultiplier * len(Tile10)
            Tile10.append(canvas3.create_rectangle(32+sWidth, location+10, 116-sWidth, location+10+addheight, fill='blue'))
            if small == False:
                location += 10
            Text10.append(canvas3.create_text(77, location+24, fill="black", font="Arial",text="10"))
            canvas3.update()
            fr10 -= 1

        while(True):
            if(fr1 <= 0 or fr1 == None):
                break
            location = lMultiplier * len(Tile1)
            Tile1.append(canvas4.create_rectangle(32+sWidth, location+10, 116-sWidth, location+10+addheight, fill='green'))
            if small == False:
                location += 10
            Text1.append(canvas4.create_text(77, location+24, fill="black", font="Arial",text="1"))
            canvas4.update()
            fr1 -= 1


    def delGarbage(stopAt=999, delAll=False):
        # clr1(None)
        global Tile1
        global Tile10
        global Tile100
        global Tile1000
        global Text1
        global Text10
        global Text100
        global Text1000
        a = len(Tile1)
        b = len(Tile10)
        c = len(Tile100)
        d = len(Tile1000)
        e = len(locationArr)
        stop = 0

        if stopAt == 999:
            if(e > 0.9):
                stopAt = locationArr[e-1]/lMultiplier
                stopAt += 1
            else:
                stopAt = 0
        
        if delAll:
            stopAt = 0
        stopAt = int(stopAt)
        print("Stops at:",stopAt)
        while not delAll:
            if(len(Tile1) <= stopAt):
                break
            if(len(Tile10) <= stopAt):
                break
            if(len(Tile100) <= stopAt):
                break
            if(len(Tile1000) <= stopAt):
                break
            if(a > stopAt and Tile1[a-1] == None):
                Text1.pop(a-1)
                Tile1.pop(a-1)
            else:
                stop += 1

            if(Tile10[b-1] == None and b >= stopAt):
                Text10.pop(b-1)
                Tile10.pop(b-1)
            else:
                stop += 1
                
            if(Tile100[c-1] == None and c >= stopAt):
                Text100.pop(c-1)
                Tile100.pop(c-1)
            else:
                stop += 1
                
            if(Tile1000[d-1] == None and d >= stopAt):
                Text1000.pop(d-1)
                Tile1000.pop(d-1)
            else:
                stop += 1

            if(stop > 3.1):
                stop = 0
                break
            stop = 0
            a = len(Tile1)
            b = len(Tile10)
            c = len(Tile100)
            d = len(Tile1000)   
            print(d,c,b,a)
        



    def clr1(event):
        x = len(testB)-1
        a = len(Tile1)
        b = len(Tile10)
        c = len(Tile100)
        d = len(Tile1000)
        e = len(Text1)
        f = len(Text10)
        g = len(Text100)
        h = len(Text1000)
        numL = len(line1)
        while(1):            
            a -= 1
            e -= 1
            if(a < 0):
                break
            canvas4.delete(Tile1[a])
            canvas4.delete(Text1[a])
            Tile1.pop(a)
            Text1.pop(e)
            if(len(Tile1) < 1):
                break

        while(1):
            b -= 1
            f -= 1
            if(b < 0):
                break
            canvas3.delete(Tile10[b])
            canvas3.delete(Text10[b])
            Tile10.pop(b)
            Text10.pop(f)
            if(len(Tile10) < 1):
                break



        while(1):
            c -= 1
            g -= 1
            if(c < 0):
                break
            canvas2.delete(Tile100[c])
            canvas2.delete(Text100[c])
            Tile100.pop(c)
            Text100.pop(g)
            if(len(Tile100) < 1):
                break

        while(1):
            d -= 1
            h -= 1
            if(d < 0):
                break
            canvas1.delete(Tile1000[d])
            canvas1.delete(Text1000[d])
            Tile1000.pop(d)
            Text1000.pop(h)
            if(len(Tile1000) < 1):
                break

        while(True):
            if(numL <= 0):
                 break
            
            canvas1.delete(line1000[numL-1])
            canvas2.delete(line100[numL-1])
            canvas3.delete(line10[numL-1])
            canvas4.delete(line1[numL-1])
            line1000.pop()
            line100.pop()
            line10.pop()
            line1.pop()
            numL = len(line1)

        i = 0
            
        while(True):
            if(x < 0):
                 break
                
            testB[x].destroy()
            testB.pop(x)
            locationArr.pop(x)
            numL = len(Tile1000)
            x = len(testB)-1
        a = len(line1000)-1
            
                
    def smallTurn(event):
        global small
        small = not small

    def rlDel(event):
        global testB
        global locationArr
        global TextSpace
    
        numL = len(Tile1000)
        x = len(testB)-1
        a = len(line1000)-1
        x = len(testB)-1
        a = len(Tile1000)
        b = len(Tile100)
        c = len(Tile10)
        d = len(Tile1)
        e = x
        
        testB[x].destroy()
        testB.pop(x)
        
        print(a,b,c,d,e,x)
        
        best = (a+b+c+b) / 4
        best = int(best)
        if a < best:
            best = a
        if b < best:
            best = b
        if c < best:
            best = c
        if d < best:
            best = d
        numL = locationArr[e]//52 +1
        print(e,len(line1))
        
        
        locationArr.pop()
        
        canvas1.delete(line1000[e])
        canvas2.delete(line100[e])
        canvas3.delete(line10[e])
        canvas4.delete(line1[e])
        line1000.pop()
        line100.pop()
        line10.pop()
        line1.pop()

        
        canvas1.delete(Text1000[numL-1])
        canvas2.delete(Text100[numL-1])
        canvas3.delete(Text10[numL-1])
        canvas4.delete(Text1[numL-1])
        canvas1.delete(Tile1000[numL-1])
        canvas2.delete(Tile100[numL-1])
        canvas3.delete(Tile10[numL-1])
        canvas4.delete(Tile1[numL-1])
        
        numL -= 1
        
        Text1000.pop(numL)
        Text100.pop(numL)
        Text10.pop(numL)
        Text1.pop(numL)
        Tile1.pop(numL)
        Tile10.pop(numL)
        Tile100.pop(numL)
        Tile1000.pop(numL)
        
        
        numL = len(Tile1000)
        x = len(testB)-1
        a = len(line1000)-1
        e = len(locationArr)-1
        delGarbage()
        
            
    def add(mode=None):
        global Tile1
        global Tile10
        global Tile100
        global Tile1000
        global locationArr
        fromsaved = False
        if mode == 'save':
            fromsaved = True
        best = 0
        a = len(Tile1)
        b = len(Tile10)
        c = len(Tile100)
        d = len(Tile1000)

        best = (a+b+c+b) / 4
        best = int(best)
        if a > best:
            best = a
        if b > best:
            best = b
        if c > best:
            best = c
        if d > best:
            best = d

        location = best * lMultiplier
        if fromsaved:
            best = locationArr[len(locationArr)-1]/lMultiplier
            best = int(best)

        #locationArr.append(location)
        while(True):
            Tile1.append(None)
            Text1.append(None)
            if(len(Tile1)> best):
                break
        while(True):
            Tile10.append(None)
            Text10.append(None)
            if(len(Tile10)> best):
                break
        while(True):
            Tile100.append(None)
            Text100.append(None)
            if(len(Tile100)> best):
                break
        while(True):
            Tile1000.append(None)
            Text1000.append(None)
            if(len(Tile1000)> best):
                break
        if not fromsaved:
            locationArr.append(location)
        testB.append(tkinter.Button(text="del", bg="red", width=10))
        line1.append(canvas4.create_image(0, location+3, image = ruler1,anchor = "nw"))
        line10.append(canvas3.create_image(0, location+3, image = ruler2,anchor = "nw"))
        line100.append(canvas2.create_image(0, location+3, image = ruler3,anchor = "nw"))
        line1000.append(canvas1.create_image(0, location+3, image = ruler4,anchor = "nw"))
        
        for x in range(len(testB)):
            testB[x].bind("<ButtonRelease-1>", rlDel)
            testB[x].place(x=77, y=locationArr[x]+90)
        

    def Del(typ):
        global Tile1
        global Tile10
        global Tile100
        global Tile1000
        a = len(Tile1)-1
        b = len(Tile10)-1
        c = len(Tile100)-1
        d = len(Tile1000)-1

        if typ == 1 and a+1 > 0:
            canvas4.delete(Tile1 [len(Tile1)-1])
            canvas4.delete(Text1 [len(Text1)-1])
            Text1.pop()
            Tile1.pop()
            
        elif typ == 10 and len(Tile10)>0:
            canvas3.delete(Tile10[len(Tile10)-1])
            canvas3.delete(Text10[len(Text10)-1])
            Text10.pop()
            Tile10.pop()
            
        elif typ == 100 and len(Tile100)>0:
            canvas2.delete(Tile100[len(Tile100)-1])
            canvas2.delete(Text100[len(Text100)-1])
            Text100.pop()
            Tile100.pop()
            
        elif typ == 1000 and len(Tile1000)>0:
            canvas1.delete(Tile1000[len(Tile1000)-1])
            canvas1.delete(Text1000[len(Text1000)-1])
            Text1000.pop()
            Tile1000.pop()


    def one(event):
        ATS(0, 0, 0, 1)

    def ten(event):
        ATS(0, 0, 1, 0)

    def hun(event):
        ATS(0, 1, 0, 0)

    def tho(event):
        ATS(1, 0, 0, 0)

    def Del1(event):
        Del(1)
        
    def Del10(event):
        Del(10)
        
    def Del100(event):
        Del(100)
        
    def Del1000(event):
        Del(1000)
        
    def res(event):
        os.system("StampGame.py")
        sys.exit(0)
        

    def div(event):
        if (tkinter.messagebox.askyesno(title="StampGame Division", message="Would you like to open the devision program?")):
            os.system("div.py")
            window.destroy()
        return

        
    def spinning_cursor(rps):
        for i in range(rps):
            for cursor in '-\|/':
              sys.stdout.write('{}\b'.format(cursor))
              sys.stdout.flush()
              sleep(0.1)
    def close():
        print("Closed by user")
        sys.exit(0)
    
    def ext(event):
        close()
        
    def load(event):
        loadVals = []
        
        print("Loading Tile Data ", end='')
        spinning_cursor(1)
        
        with open("save.json")as dFile:
            loadVals = json.load(dFile)

        t1 = loadVals[0]
        t10 = loadVals[1]
        t100 = loadVals[2]
        t1000 = loadVals[3]
        
        tn1 = int(t1)
        tn10 = int(t10)
        tn100 = int(t100)
        tn1000 = int(t1000)
        ATS(tn1000, tn100, tn10, tn1)
        print('', end="\r")
        print("-Done             ")
        
    def save(event):
        e = len(locationArr)
        saveRLocs = []
        delGarbage(0)
        
        a = len(Tile1)
        b = len(Tile10)
        c = len(Tile100)
        d = len(Tile1000)
        saveVals = [a, b, c, d]
        
        with open("save.json", 'w')as sTileF:
            json.dump(saveVals, sTileF)
            spinning_cursor(1)
        print("Tile data saved sucessfully")

        delGarbage(0)


    def ClrSa(event):
        emptyVals = [0, 0, 0, 0]
        print("Clearing saved tile data...")
        with open('save.json', 'w') as y:
            json.dump(emptyVals, y)

        z = open('saveL.txt', 'w')
        z.write('')
        spinning_cursor(1)
        z.close()
        
        print("\nTile data cleared")

    def Update(event):
         os.system("updatenote.py")

    canvas1 = tkinter.Canvas(window, width = 150, height = 1000, bg="lemon chiffon", bd=-3)
    canvas2 = tkinter.Canvas(window, width = 150, height = 1000, bg="lemon chiffon", bd=-3)
    canvas3 = tkinter.Canvas(window, width = 150, height = 1000, bg="lemon chiffon", bd=-3)
    canvas4 = tkinter.Canvas(window, width = 150, height = 1000, bg="lemon chiffon", bd=-3)
    canvasI = tkinter.Canvas(window, width = 10000, height = 10000,bg="lemon chiffon",bd=-3)
    buttonSa = tkinter.Button(window, text="Save", bg="red2", width=10)
    buttonWi = tkinter.Button(window, text="ClearSave", bg="red2", width=10)
    buttonLo = tkinter.Button(window, text="Load", bg="red2", width=10)
    button1 = tkinter.Button(window, text="1", bg="green", width=10)
    button10 = tkinter.Button(window, text="10", bg="blue", width=10)
    button100 = tkinter.Button(window, text="100", bg="firebrick1", width=10)
    button1000 = tkinter.Button(window, text="1000", bg="green", width=10)
    button1Del = tkinter.Button(window, text="Delete", bg="red2", width=10)
    button10Del = tkinter.Button(window, text="Delete", bg="red2", width=10)
    button100Del = tkinter.Button(window, text="Delete", bg="red2", width=10)
    button1000Del = tkinter.Button(window, text="Delete", bg="red2", width=10)
    buttonClr = tkinter.Button(window, text="CLEAR ALL", bg="red2", width=10)
    buttonExt = tkinter.Button(window, text="RESTART", bg="red2", width=10)
    buttonExtt = tkinter.Button(window, text="EXIT", bg="red2", width=10)
    buttonAdd = tkinter.Button(window, text="+", bg="red2", width=10)
    buttonDiv = tkinter.Button(window, text="÷", bg="red2", width=10)
    buttonSmall = tkinter.Button(window, text="Small Mode", bg="red2", width=10)
    
    canvas1.create_image(0, 0, image = bg, anchor = "nw")
    canvas2.create_image(0, 0, image = bg, anchor = "nw")
    canvas3.create_image(0, 0, image = bg, anchor = "nw")
    canvas4.create_image(0, 0, image = bg, anchor = "nw")

    itemInit()

    canvasI.create_image(0, 0, image = back,anchor = "nw")
    if(upp > version):
        buttonUpdate = tkinter.Button(window, text="Update", bg="red2", width=10)
        buttonUpdate.place(x =80, y = 104)
        buttonUpdate.bind("<ButtonRelease-1>",Update)

    
    button1.bind("<ButtonRelease-1>", one)
    button10.bind("<ButtonRelease-1>", ten)
    button100.bind("<ButtonRelease-1>", hun)
    button1000.bind("<ButtonRelease-1>", tho)
    buttonClr.bind("<ButtonRelease-1>", clr1)
    button1Del.bind("<ButtonRelease-1>", Del1 )
    button10Del.bind("<ButtonRelease-1>", Del10)
    button100Del.bind("<ButtonRelease-1>", Del100)
    button1000Del.bind("<ButtonRelease-1>", Del1000)
    buttonClr.bind("<ButtonRelease-1>", clr1)
    buttonExt.bind("<ButtonRelease-1>", clr1)
    buttonExtt.bind("<ButtonRelease-1>", ext)
    buttonAdd.bind("<ButtonRelease-1>", add,)
    buttonDiv.bind("<ButtonRelease-1>", div)
    buttonSa.bind("<ButtonRelease-1>", save)
    buttonLo.bind("<ButtonRelease-1>", load)
    buttonWi.bind("<ButtonRelease-1>", ClrSa)
    buttonSmall.bind("<ButtonRelease-1>", smallTurn)
    window.title("Stamp Game")
    window.protocol("WM_DELETE_WINDOW", close)
    window.mainloop()
    

except SystemExit:
    window.destroy()
    print("Exiting..")
    spinning_cursor(1)
    SystemExit(0)

except Exception as Error:
    print("An Error has Occured")
    print(Error)

finally:
    print("Goodbye")
